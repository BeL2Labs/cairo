//! > Unused coupon

//! > test_runner_name
test_program_generator

//! > cairo
extern fn coupon_buy<T>() -> T nopanic;
extern fn coupon_refund<T>(c: T) nopanic;
extern fn drop<T>(c: T) nopanic;

struct MyStruct {
    c: bar::<u8>::Coupon,
    box: Box::<bar::<u8>::Coupon>,
}

fn foo(my_struct: MyStruct, coupon: bar::<u8>::Coupon) -> (MyStruct, bar::<u8>::Coupon) {
    coupon_refund(my_struct.c);
    coupon_refund(my_struct.box.unbox());
    drop(coupon);
    (MyStruct{ c: coupon_buy(), box: BoxTrait::new(coupon_buy()) }, coupon_buy())
}

fn bar<T>() -> felt252 {
    10
}

//! > sierra_code
type Coupon<user@test::bar::<core::integer::u8>> = Coupon<user@test::bar::<core::integer::u8>> [storable: true, drop: true, dup: false, zero_sized: true];
type Box<Coupon<user@test::bar::<core::integer::u8>>> = Box<Coupon<user@test::bar::<core::integer::u8>>> [storable: true, drop: true, dup: false, zero_sized: false];
type test::MyStruct = Struct<ut@test::MyStruct, Coupon<user@test::bar::<core::integer::u8>>, Box<Coupon<user@test::bar::<core::integer::u8>>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<test::MyStruct, Coupon<user@test::bar::<core::integer::u8>>> = Struct<ut@Tuple, test::MyStruct, Coupon<user@test::bar::<core::integer::u8>>> [storable: true, drop: true, dup: false, zero_sized: false];

libfunc struct_deconstruct<test::MyStruct> = struct_deconstruct<test::MyStruct>;
libfunc coupon_refund<Coupon<user@test::bar::<core::integer::u8>>> = coupon_refund<Coupon<user@test::bar::<core::integer::u8>>>;
libfunc unbox<Coupon<user@test::bar::<core::integer::u8>>> = unbox<Coupon<user@test::bar::<core::integer::u8>>>;
libfunc drop<Coupon<user@test::bar::<core::integer::u8>>> = drop<Coupon<user@test::bar::<core::integer::u8>>>;
libfunc coupon_buy<Coupon<user@test::bar::<core::integer::u8>>> = coupon_buy<Coupon<user@test::bar::<core::integer::u8>>>;
libfunc into_box<Coupon<user@test::bar::<core::integer::u8>>> = into_box<Coupon<user@test::bar::<core::integer::u8>>>;
libfunc struct_construct<test::MyStruct> = struct_construct<test::MyStruct>;
libfunc struct_construct<Tuple<test::MyStruct, Coupon<user@test::bar::<core::integer::u8>>>> = struct_construct<Tuple<test::MyStruct, Coupon<user@test::bar::<core::integer::u8>>>>;

struct_deconstruct<test::MyStruct>([0]) -> ([2], [3]); // 0
coupon_refund<Coupon<user@test::bar::<core::integer::u8>>>([2]) -> (); // 1
unbox<Coupon<user@test::bar::<core::integer::u8>>>([3]) -> ([4]); // 2
coupon_refund<Coupon<user@test::bar::<core::integer::u8>>>([4]) -> (); // 3
drop<Coupon<user@test::bar::<core::integer::u8>>>([1]) -> (); // 4
coupon_buy<Coupon<user@test::bar::<core::integer::u8>>>() -> ([5]); // 5
coupon_buy<Coupon<user@test::bar::<core::integer::u8>>>() -> ([6]); // 6
into_box<Coupon<user@test::bar::<core::integer::u8>>>([6]) -> ([7]); // 7
coupon_buy<Coupon<user@test::bar::<core::integer::u8>>>() -> ([8]); // 8
struct_construct<test::MyStruct>([5], [7]) -> ([9]); // 9
struct_construct<Tuple<test::MyStruct, Coupon<user@test::bar::<core::integer::u8>>>>([9], [8]) -> ([10]); // 10
return([10]); // 11

test::foo@0([0]: test::MyStruct, [1]: Coupon<user@test::bar::<core::integer::u8>>) -> (Tuple<test::MyStruct, Coupon<user@test::bar::<core::integer::u8>>>);
