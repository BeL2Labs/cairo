//! > Test type items in trait/impl. phase0.

//! > TODO(yg): 1. make this work. 2. change in impl to MyImpl::InputType. 3. change in both to Self. All in separate tests. 4. Also add tests with refering to it as test::MyTrait and super::MyTrait.

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: false)

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
trait MyTrait {
    type InputType;
    type OutputType;
    fn foo(x: MyTrait::InputType) -> MyTrait::OutputType;
}
impl MyImpl of MyTrait {
    type InputType = u8;
    type OutputType = u32;
    fn foo(x: u8) -> u32 {
        0
    }
}

//! > expected_diagnostics
error: Invalid path.
 --> lib.cairo:4:47
    fn foo(x: MyTrait::InputType) -> MyTrait::OutputType;
                                              ^********^

error: Invalid path.
 --> lib.cairo:4:24
    fn foo(x: MyTrait::InputType) -> MyTrait::OutputType;
                       ^*******^

error: Parameter type of impl function `MyImpl::foo` is incompatible with `MyTrait::foo`. Expected: `<missing>`, actual: `core::integer::u8`.
 --> lib.cairo:9:15
    fn foo(x: u8) -> u32 {
              ^^

error: Return type of impl function `MyImpl::foo` is incompatible with `MyTrait::foo`. Expected: `<missing>`, actual: `core::integer::u32`.
 --> lib.cairo:9:22
    fn foo(x: u8) -> u32 {
                     ^*^
